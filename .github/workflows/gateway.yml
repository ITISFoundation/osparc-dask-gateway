name: osparc-gateway-server

on:
  push:
    branches:
      - "*"
    tags-ignore:
      - "*"
    paths-ignore:
      - "*.md"
      - "*.png"
      - "*.svg"
      - "docs/**"
      - ".vscode/**"
  pull_request:
    branches:
      - "*"
    paths-ignore:
      - "*.md"
      - "*.png"
      - "*.svg"
      - "docs/**"
      - ".vscode/**"
      - ".vscode-template/**"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # secrets can be set in settings/secrets on github
  # DOCKER_REGISTRY: must be one of docker.io, ghcr.io, registry.gitlab.com, <registry-name>.azurecr.io, gcr.io, <location>-docker.pkg.dev, <aws-account-number>.dkr.ecr.<region>.amazonaws.com, public.ecr.aws, <region>.ocir.io, quay.io, or custom (not tested)
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}

jobs:
  unit-test:
    timeout-minutes: 10
    strategy:
      matrix:
        python: [3.9]
        os: [ubuntu-20.04]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: setup python environment
        uses: actions/setup-python@v3.1.0
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v3
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-osparc-gateway-server-${{ hashFiles('services/osparc-gateway-server/requirements/prod.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-osparc-gateway-server-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install
        run: |
          make devenv && \
          source .venv/bin/activate && \
          pushd services/osparc-gateway-server && \
          make install-ci
      - name: test
        run: |
          source .venv/bin/activate && \
          pushd services/osparc-gateway-server && \
          make test-ci-unit
      - uses: codecov/codecov-action@v3.0.0
        with:
          flags: unittests #optional
  integration-test:
    timeout-minutes: 15
    strategy:
      matrix:
        python: [3.9]
        os: [ubuntu-20.04]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: setup python environment
        uses: actions/setup-python@v3.1.0
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v3
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-osparc-gateway-server-${{ hashFiles('services/osparc-gateway-server/requirements/prod.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-osparc-gateway-server-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install
        run: |
          make devenv && \
          source .venv/bin/activate && \
          pushd services/osparc-gateway-server && \
          make install-ci
      - name: test
        run: |
          source .venv/bin/activate && \
          pushd services/osparc-gateway-server && \
          make test-ci-integration
      - uses: codecov/codecov-action@v3.0.0
        with:
          flags: integrationtests #optional

  system-tests:
    timeout-minutes: 10
    strategy:
      matrix:
        python: [3.9]
        os: [ubuntu-20.04]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: setup python environment
        uses: actions/setup-python@v3.1.0
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v3
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-osparc-gateway-server-${{ hashFiles('tests/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-osparc-gateway-server-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: build osparc-dask-gateway-server
        run: |
          make build && \
          make info-images
      - name: install
        run: |
          make devenv && \
          source .venv/bin/activate && \
          pushd tests && \
          make install-ci
      - name: test
        run: |
          source .venv/bin/activate && \
          pushd tests && \
          make tests

  build-multi-platform:
    timeout-minutes: 30
    needs: [unit-test, integration-test, system-tests]
    strategy:
      matrix:
        python: [3.9]
        os: [ubuntu-20.04]
        docker_buildx: [v0.7.0]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - name: set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: setup docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: ${{ matrix.docker_buildx }}
          driver: docker-container # a must for multi-arch buildsplatform
      - name: setup python environment
        uses: actions/setup-python@v3.1.0
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - name: login to docker registry
        uses: docker/login-action@v1
        if: github.event_name == 'push'
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: build and deploy image for linux/amd64,linux/arm/v7,linux/arm64
        if: github.event_name == 'push'
        env:
          DOCKER_TARGET_PLATFORMS: linux/amd64,linux/arm/v7,linux/arm64
          DOCKER_REGISTRY: ${{ secrets.DOCKER_IMAGE_PATH }}
        run: |
          make build push=1 && \
          make info-images
      - name: build image for linux/amd64,linux/arm/v7,linux/arm64
        if: github.event_name == 'pull_request'
        env:
          DOCKER_TARGET_PLATFORMS: linux/amd64,linux/arm/v7,linux/arm64
        run: |
          make build && \
          make info-images
